'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.ensureLocalDomainPath = ensureLocalDomainPath;
exports.default = createLocalDomainSocket;

var _net = require('net');

var _net2 = _interopRequireDefault(_net);

var _fs = require('fs');

var _rimraf = require('rimraf');

var _rimraf2 = _interopRequireDefault(_rimraf);

var _callMeMaybe = require('call-me-maybe');

var _callMeMaybe2 = _interopRequireDefault(_callMeMaybe);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ensureLocalDomainPath(path) {
	if (typeof path !== 'string') {
		throw new Error('path must be string');
	}

	if (process.platform === 'win32' && !path.startsWith('\\\\.\\pipe\\')) {
		path = path.replace(/^\//, '').replace(/[/:]/g, '-');
		return `\\\\.\\pipe\\${ path }`;
	}
	return path;
}

function createLocalDomainSocket(server, path, callback) {
	return (0, _callMeMaybe2.default)(callback, new Promise((resolve, reject) => {
		path = ensureLocalDomainPath(path);

		server.on('error', function handleServerError(err) {
			if (err.code === 'EADDRINUSE') {
				const clientSocket = new _net2.default.Socket();
				clientSocket.on('error', function handleClientError(err) {
					if (err.code === 'ECONNREFUSED' || err.code === 'ENOTSOCK') {
						(0, _fs.stat)(path, (e, stats) => {
							if (!e && stats && !stats.size) {
								(0, _rimraf2.default)(path, function handleRemoveError(rimrafErr) {
									/* istanbul ignore next */
									if (rimrafErr) {
										reject(err);
									} else {
										server.listen(path, resolve);
									}
								});
							} else {
								reject(err);
							}
						});
					} else {
						/* istanbul ignore next */
						reject(err);
					}
				});

				clientSocket.connect({ path }, function clientConnect() {
					const error = new Error('listen EADDRINUSE');
					Object.assign(error, {
						errno: 'EADDRINUSE',
						code: 'EADDRINUSE',
						syscall: 'listen'
					});
					clientSocket.destroy();
					reject(error);
				});
			}
		});

		server.listen(path, resolve);
	}));
}